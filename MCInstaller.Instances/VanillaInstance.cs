using MCInstaller.Java;
using MCInstaller.Jar;
using MCInstaller.Core.Exceptions;
using MCInstaller.Core;
using System.Diagnostics;
using System.Reflection;
using System.Text;

namespace MCInstaller.Instances
{
    public class VanillaInstance : IServerInstance
    {
        public JavaReference? Java { get; private set; }
        public MinecraftVersion Version { get; init; }
        public string WorkingDir { get; init; }

        public VanillaInstance(string workingDir, MinecraftVersion version, JavaReference? java = null)
        {
            WorkingDir = Path.GetFullPath(workingDir);
            Version = version;
            Java = java;
        }

        public async Task<int> Init()
        {
            if (!Path.Exists(WorkingDir))
                return await Task.FromResult(-1);

            if (Java == null)
            {
                var javas = JavaChecker.Default.GetDefaultJavas();
                if (!javas.Any())
                {
                    Log.Error("Can't find javas installed on your computer.");
                    Log.Error("Install java with your default package manager or provide manually with --java option.");
                    return await Task.FromResult(-1);
                }
                Java = javas.MaxBy(p => p.Version.Minor)!;
            }
            if (!CheckJava())
                return await Task.FromResult(-1);


            Log.Information("Initializing server...");


            JarReference jar = new JarReference(Version, ServerType.Vanilla);
            if (!await jar.IsValidAsync())
            {
                Log.Error($"minecraft vanilla {Version} is not in the ServerJars lib.");
                return await Task.FromResult(-1);
            }

            await jar.DownloadAsync(WorkingDir);
            string pathToJar = Path.Combine(WorkingDir, jar.GetFileName());


            using (var process = new Process())
            {
                var processInfo = new ProcessStartInfo
                {
                    FileName = Java.PathToJava,
                    UseShellExecute = false,
                    WorkingDirectory = WorkingDir,
                    CreateNoWindow = true,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    Arguments = $"-jar {pathToJar} nogui"
                };
                process.OutputDataReceived += (s, e) =>
                {
                    if (e.Data != null)
                        Log.ExternalOutput(e.Data, "SERVER");
                };

                process.StartInfo = processInfo;
                Log.Information("Starting server...");
                process.Start();
                process.BeginOutputReadLine();
                process.WaitForExit();
                Log.Information("Server exited.");
            }

            if (!Path.Exists(Path.Combine(WorkingDir, "user_jvm_args.txt")))
                await GenerateJvmArgsFile();

            if (!Path.Exists(Path.Combine(WorkingDir, "run.sh")))
                await GenerateRunFile(Java, pathToJar);

            Log.Information("Server initializing complete.");
            Log.Information("Edit jvm args in user_jvm_args.txt file.");
            Log.Information("Start server with ./run.sh command.");

            return await Task.FromResult(0);
        }

        private bool CheckJava()
        {
            // throw new TodoException();
            return true;
        }

        private async Task GenerateJvmArgsFile()
        {
            using (FileStream jvmArgsFile = File.Create(Path.Combine(WorkingDir, "user_jvm_args.txt")))
            {
                string jvmArgs = @$"# Auto-generated by {Assembly.GetEntryAssembly()!.GetName().Name} v{Assembly.GetEntryAssembly()!.GetName().Version}.
# Xmx and Xms set the maximum and minimum RAM usage, respectively.
# They can take any number, followed by an M or a G.
# M means Megabyte, G means Gigabyte.
# For example, to set the maximum to 3GB: -Xmx3G
# To set the minimum to 2.5GB: -Xms2500M

# A good default for a modded server is 4GB.
# Uncomment the next line to set it.
# -Xms5G -Xmx6G";

                byte[] buffer = Encoding.Default.GetBytes(jvmArgs);
                await jvmArgsFile.WriteAsync(buffer, 0, buffer.Length);
            }
        }

        private async Task GenerateRunFile(JavaReference java, string pathToJar)
        {
            using (FileStream runFile = File.Create(Path.Combine(WorkingDir, "run.sh")))
            {
                string run = @$"# Auto-generated by {Assembly.GetEntryAssembly()!.GetName().Name} v{Assembly.GetEntryAssembly()!.GetName().Version}
# Run this file to start your minecraft server.
# Pass your JVM options to user_jvm_args.txt.
{java.PathToJava} @user_jvm_args.txt -jar {pathToJar} nogui";

                byte[] buffer = Encoding.Default.GetBytes(run);
                await runFile.WriteAsync(buffer, 0, buffer.Length);
                Process.Start("chmod", $"+x {runFile.Name}");
            }
        }
    }
}

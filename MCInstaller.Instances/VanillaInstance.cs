using MCInstaller.Utilities;
using MCInstaller.Core.Exceptions;
using System.Diagnostics;
using System.Reflection;
using System.Text;

namespace MCInstaller.Instances
{
    public class VanillaInstance : IServerInstance
    {
        public readonly JarReference Jar;
        public readonly JavaReference Java;
        public readonly string WorkingDir;

        public VanillaInstance(JarReference jar, JavaReference java, string workingDir)
        {
            Jar = jar;
            Java = java;
            WorkingDir = Path.GetFullPath(workingDir);
        }

        public async Task Init()
        {
            if (!Path.Exists(WorkingDir))
                throw new IOException($"Path {WorkingDir} doesn't exists");

            string pathToJar = Path.Combine(WorkingDir, Jar.GetFileName());
            if (!Path.Exists(pathToJar))
                await Jar.InstallAsync(WorkingDir);

            await GenerateJvmArgsFile();
            await GenerateRunFile();

            using (var process = new Process())
            {
                var processInfo = new ProcessStartInfo
                {
                    FileName = Java.PathToJava,
                    UseShellExecute = false,
                    WorkingDirectory = WorkingDir,
                    CreateNoWindow = true,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    Arguments = $"-jar {Jar.GetFileName()} nogui"
                };

                process.StartInfo = processInfo;
                process.Start();
                process.WaitForExit();

            }
        }

        private async Task GenerateJvmArgsFile()
        {
            using (FileStream jvmArgsFile = File.Create(Path.Combine(WorkingDir, "user_jvm_args.txt")))
            {
                string jvmArgs = @$"# Auto-generated by {Assembly.GetEntryAssembly()!.GetName().Name} v{Assembly.GetEntryAssembly()!.GetName().Version}.
# Xmx and Xms set the maximum and minimum RAM usage, respectively.
# They can take any number, followed by an M or a G.
# M means Megabyte, G means Gigabyte.
# For example, to set the maximum to 3GB: -Xmx3G
# To set the minimum to 2.5GB: -Xms2500M

# A good default for a modded server is 4GB.
# Uncomment the next line to set it.
# -Xms5G -Xmx6G";

                byte[] buffer = Encoding.Default.GetBytes(jvmArgs);
                await jvmArgsFile.WriteAsync(buffer, 0, buffer.Length);
            }
        }

        private async Task GenerateRunFile()
        {
            using (FileStream runFile = File.Create(Path.Combine(WorkingDir, "run.sh")))
            {
                string run = @$"# Auto-generated by {Assembly.GetEntryAssembly()!.GetName().Name} v{Assembly.GetEntryAssembly()!.GetName().Version}
# Run this file to start your minecraft server.
# Pass your JVM options to user_jvm_args.txt.
{Java.PathToJava} @user_jvm_args.txt -jar {Jar.GetFileName()} nogui";

                byte[] buffer = Encoding.Default.GetBytes(run);
                await runFile.WriteAsync(buffer, 0, buffer.Length);
                Process.Start("chmod", $"+x {runFile.Name}");
            }
        }
    }
}

// using MCInstaller.Jar;
// using MCInstaller.Java;
// using MCInstaller.Core.Exceptions;
// using MCInstaller.Core;
// using System.Diagnostics;
// using System.Reflection;
// using System.Text;
//
// namespace MCInstaller.Instances
// {
//     public class ForgeInstance : IServerInstance
//     {
//         public JarReference Jar { get; init; }
//         public JavaReference Java { get; init; }
//         public string WorkingDir { get; init; }
//
//         public ForgeInstance(JarReference jar, JavaReference java, string workingDir)
//         {
//             Jar = jar;
//             Java = java;
//             WorkingDir = Path.GetFullPath(workingDir);
//         }
//
//         public async Task Init()
//         {
//             if (!Path.Exists(WorkingDir))
//                 throw new IOException($"Path {WorkingDir} doesn't exists.");
//
//             if (Jar.Type != ServerType.Forge)
//                 throw new Exception($"Jar is not type forge.");
//
//             Log.VerboseInformation($"Server jar is installer. Processing to install {Jar.Type}.");
//
//             await Jar.DownloadAsync(WorkingDir, "forge-installer.jar");
//
//             using (var process = new Process())
//             {
//                 var processInfo = new ProcessStartInfo
//                 {
//                     UseShellExecute = false,
//                     CreateNoWindow = true,
//                     FileName = Java.PathToJava,
//                     Arguments = $"-jar {Path.Combine(WorkingDir, "forge-installer.jar")} --installServer",
//                     RedirectStandardError = true,
//                     RedirectStandardOutput = true,
//                     WorkingDirectory = WorkingDir,
//                 };
//                 process.StartInfo = processInfo;
//                 if (Log.Verbose)
//                 {
//                     process.OutputDataReceived += (s, e) =>
//                     {
//                         string? input = e.Data;
//                         if (input is not null)
//                             Log.ExternalOutput(input, "FORGE-INSTALLER");
//                     };
//                 }
//
//                 Log.Information("Starting forge installer...");
//                 process.Start();
//
//                 process.BeginOutputReadLine();
//
//                 await process.WaitForExitAsync();
//                 Log.Information("forge installer exited.");
//
//                 if (process.ExitCode == 127)
//                     throw new Exception($"{Java.PathToJava} is not found.");
//             }
//             Log.VerboseInformation("Forge installed.");
//
//             if (!Path.Exists(Path.Combine(WorkingDir, "user_jvm_args.txt")))
//                 await GenerateJvmArgsFile();
//             if (!Path.Exists(Path.Combine(WorkingDir, "run.sh")))
//                 await GenerateRunFile();
//
//         }
//
//         private async Task GenerateJvmArgsFile()
//         {
//             using (FileStream jvmArgsFile = File.Create(Path.Combine(WorkingDir, "user_jvm_args.txt")))
//             {
//                 string jvmArgs = @$"# Auto-generated by {Assembly.GetEntryAssembly()!.GetName().Name} v{Assembly.GetEntryAssembly()!.GetName().Version}.
// # Xmx and Xms set the maximum and minimum RAM usage, respectively.
// # They can take any number, followed by an M or a G.
// # M means Megabyte, G means Gigabyte.
// # For example, to set the maximum to 3GB: -Xmx3G
// # To set the minimum to 2.5GB: -Xms2500M
//
// # A good default for a modded server is 4GB.
// # Uncomment the next line to set it.
// # -Xms5G -Xmx6G";
//
//                 byte[] buffer = Encoding.Default.GetBytes(jvmArgs);
//                 await jvmArgsFile.WriteAsync(buffer, 0, buffer.Length);
//             }
//         }
//
//         private async Task GenerateRunFile()
//         {
//             using (FileStream runFile = File.Create(Path.Combine(WorkingDir, "run.sh")))
//             {
//                 string pathToJar = Directory.EnumerateFiles(WorkingDir, $"forge-{Jar.Version.ToString()}*").First();
//                 string run = @$"# Auto-generated by {Assembly.GetEntryAssembly()!.GetName().Name} v{Assembly.GetEntryAssembly()!.GetName().Version}
// # Run this file to start your minecraft server.
// # Pass your JVM options to user_jvm_args.txt.
// {Java.PathToJava} @user_jvm_args.txt -jar {pathToJar} nogui";
//
//                 byte[] buffer = Encoding.Default.GetBytes(run);
//                 await runFile.WriteAsync(buffer, 0, buffer.Length);
//                 Process.Start("chmod", $"+x {runFile.Name}");
//             }
//         }
//     }
// }
